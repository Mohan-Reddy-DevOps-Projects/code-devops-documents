parameters:
  - name: deploy_environment
  - name: ado_environment
  - name: variable_group
  - name: ssh_connection1
  - name: prodcul_disable_replication
  - name: prodcul_enable_replication
  - name: condition
  - name: dependsOn
    default: ['ci']
    type: object


stages:
  - stage: ${{ parameters.deploy_environment }}
    dependsOn: ${{ parameters.dependsOn }}
    condition: ${{ parameters.condition }}
    jobs:
      - deployment: deploy
        environment: ${{ parameters.ado_environment }}
        variables:
          - group: ${{ parameters.variable_group }}
          - name: APP_VERSION
            value: $[ stageDependencies.ci.set_properties.outputs['project_properties.PROJECT_VERSION'] ]
          - name: ARTIFACTID
            value: $[ stageDependencies.ci.set_properties.outputs['project_properties.PROJECT_ARTIFACTID'] ]
          - name: GROUPID
            value: $[ stageDependencies.ci.set_properties.outputs['project_properties.PROJECT_GROUPID'] ]
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    wget -O $(GROUPID).tar.gz "https://code.premierinc.com/artifacts/service/rest/v1/search/assets/download?repository=public&group=$(GROUPID)&name=$(ARTIFACTID)&sort=version&maven.baseVersion=$(APP_VERSION)&maven.extension=tar.gz"
                    tar -zxvf *.tar.gz
                  displayName: Expand tarball

                - task: SSH@0
                  condition: and(succeeded(), eq('${{ parameters.prodcul_disable_replication }}', 'true'))
                  inputs:
                    sshEndpoint: '${{ parameters.ssh_connection1 }}'
                    runOptions: 'inline'
                    inline: |
                      set -e
                      cd $(util_dir)
                      bash ./deploy.replication.sh disable $(ms) $(util_dir) "$(java_dir)" $(db_basename) true true $(db_url_clt1) $(db_url_clt2) $(db_url_cul1) $(db_url_cul2)
                    readyTimeout: '20000'
                  displayName: Disable Replication
                  env:
                    perfDisable: "${{ parameters.prodcul_disable_replication }}"

                - bash: |
                    $LIQUIBASE --log-level $(lbase_loglvl) --username "$(db_username)" --password "$(db_password)" --defaultsFile=liquibase.properties --url "$(db_url_cul1)" --contexts "$(lbase_context)" update

                  displayName: Liquibase Deployment prodcul 1
                  env:
                    LIQUIBASE: $(SYSTEM_LIQUIBASE)
                    db_password: "$(db_password)"
                    PATH: /opt/app/code/automate/tools/jdk8u192-b12/bin:$(PATH)

                - bash: |
                    $LIQUIBASE --log-level $(lbase_loglvl) --username "$(db_username)" --password "$(db_password)" --defaultsFile=liquibase.properties --url "$(db_url_cul2)" --contexts "$(lbase_context)" update
                  displayName: Liquibase Deployment prodcul 2
                  env:
                    LIQUIBASE: $(SYSTEM_LIQUIBASE)
                    db_password: "$(db_password)"
                    PATH: /opt/app/code/automate/tools/jdk8u192-b12/bin:$(PATH)

                - task: SSH@0
                  condition: and(succeeded(), eq('${{ parameters.prodcul_enable_replication }}', 'true'))
                  inputs:
                    sshEndpoint: '${{ parameters.ssh_connection1 }}'
                    runOptions: 'inline'
                    inline: |
                      set -e
                      cd $(util_dir)
                      bash ./deploy.replication.sh enable $(ms) $(util_dir) "$(java_dir)" $(db_basename) true true $(db_url_clt1) $(db_url_clt2) $(db_url_cul1) $(db_url_cul2)
                    readyTimeout: '20000'
                  displayName: Enable Replication
                  env:
                    perfDisable: "${{ parameters.prodcul_enable_replication }}"

                - task: SSH@0
                  inputs:
                    sshEndpoint: '${{ parameters.ssh_connection1 }}'
                    runOptions: 'inline'
                    inline: |
                      #!/usr/bin/sh
                      if [ "$(1_do_validation)" == "true" ]
                      then
                        cd $(util_dir)
                          bash ./deploy.validation.sh $(ms) $(util_dir) "$(java_dir)" $(db_url_cul1) $(db_url_cul2) $(db_url_cul1) $(val_slptm) $(val_typ) $(tbls)
                      fi
                    readyTimeout: '20000'
                  displayName: Validate Replication
