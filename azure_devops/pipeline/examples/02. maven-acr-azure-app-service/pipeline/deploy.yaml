parameters:
- name: ado_environment
- name: deploy_variable_group
- name: stage_name
- name: az_subscription_sc
- name: blue_green
  default: 'False'
- name: depends_on
  type: object
  default: ['ci']
- name: condition
  default: succeeded()

stages:
- stage: ${{ parameters.stage_name }}
  dependsOn: ${{ parameters.depends_on }}
  condition: ${{ parameters.condition }}

  variables:
  - group: "${{ parameters.deploy_variable_group }}"
  
  jobs:
  - deployment: deploy
    environment: "${{ parameters.ado_environment }}"

    variables:
      APP_VERSION: $[ stageDependencies.ci.set_properties.outputs['project_properties.PROJECT_VERSION'] ]
      ARTIFACTID: $[ stageDependencies.ci.set_properties.outputs['project_properties.PROJECT_ARTIFACTID'] ]
      ACR_IMAGE_NAME: "$(var_acr_name).azurecr.io/$(ARTIFACTID):$(APP_VERSION)"
      ACR_LATEST_IMAGE: "$(var_acr_name).azurecr.io/$(ARTIFACTID):latest"
      ${{ if in(parameters.blue_green, 'False', 'false') }}:
        APP_SERVICE_SLOT: 'production'
      ${{ if in(parameters.blue_green, 'True', 'true') }}:
        APP_SERVICE_SLOT: 'staging'

    strategy:
      runOnce:
        deploy:
          steps:
          - bash: | 
              docker image load -i image.tar
              echo "$(ARTIFACTID):$(APP_VERSION)"
              docker image tag  $(ARTIFACTID):$(APP_VERSION) $(ACR_IMAGE_NAME)
              docker image tag $(ARTIFACTID):$(APP_VERSION) $(ACR_LATEST_IMAGE)
            workingDirectory: $(Pipeline.Workspace)/docker_image
            displayName: Load and Tag Image

          - task: AzureCLI@2
            displayName: Push Image to ACR
            inputs:
              azureSubscription: ${{ parameters.az_subscription_sc }}
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # az login --identity
                az acr login --name $(var_acr_name)
                docker image push $(ACR_IMAGE_NAME)
                docker image push $(ACR_LATEST_IMAGE)

          - task: AzureCLI@2
            displayName: Retrieve App Insights Details
            name: app_insights
            inputs:
              azureSubscription: ${{ parameters.az_subscription_sc }}
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                app_insights_instrumentation_key=$(az resource show --resource-type "microsoft.insights/components" --query properties.InstrumentationKey -g $(var_az_app_service_rg) -n $(var_app_insights))
                app_insights_connection_string=$(az resource show --resource-type "microsoft.insights/components" --query properties.ConnectionString -g $(var_az_app_service_rg) -n $(var_app_insights))
                echo "##vso[task.setvariable variable=APP_INSIGHTS_INSTRUMENTATION_KEY;isOutput=true]$app_insights_instrumentation_key"
                echo "##vso[task.setvariable variable=APP_INSIGHTS_CONNECTION_STRING;isOutput=true]$app_insights_connection_string"

          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: ${{ parameters.az_subscription_sc }}
              resourceGroupName: $(var_az_app_service_rg)
              appName: $(var_az_app_service)
              deployToSlotOrASE: true
              slotName: '$(APP_SERVICE_SLOT)'
              imageName: "$(ACR_IMAGE_NAME)"
              appSettings: >
                -cqdoc_dev_app_yml_v3 "$(var_cqdoc_dev_app_yml_v3)"
                -SPRING_PROFILES_ACTIVE $(var_spring_profiles_active)
                -SPRING_CONFIG_LOCATION "classpath:/application.yml,classpath:/bootstrap.yml,file:/opt/app/config/application.yml"
                -WEBSITE_HEALTHCHECK_MAXPINGFAILURES "5"
                -WEBSITE_PULL_IMAGE_OVER_VNET true
                -WEBSITES_ENABLE_APP_SERVICE_STORAGE false
                -WEBSITES_PORT 8080
                -APPLICATIONINSIGHTS_CONNECTION_STRING $(app_insights.APP_INSIGHTS_CONNECTION_STRING)
                -APPINSIGHTS_INSTRUMENTATIONKEY $(app_insights.APP_INSIGHTS_INSTRUMENTATION_KEY)
                -ApplicationInsightsAgent_EXTENSION_VERSION ~3

          - task: AzureAppServiceManage@0
            displayName: Start the App Service if not started properly
            inputs:
              azureSubscription:  ${{ parameters.az_subscription_sc }} 
              ResourceGroupName: $(var_az_app_service_rg)
              WebAppName: $(var_az_app_service)
              Action: 'Start Azure App Service' 
              SpecifySlotOrASE: true
              Slot: '$(APP_SERVICE_SLOT)'

          # if blue_green is false, then app directly deploy to "production" slot
          # hence we are stopping staging slot for saving resources.
          - ${{ if in(parameters.blue_green, 'False', 'false') }}:
            - task: AzureAppServiceManage@0
              displayName: Stop the Standby Slot
              inputs:
                azureSubscription:  ${{ parameters.az_subscription_sc }} 
                ResourceGroupName: $(var_az_app_service_rg)
                WebAppName: $(var_az_app_service)
                Action: 'Stop Azure App Service' 
                SpecifySlotOrASE: true
                Slot: 'staging'

# in blue green model, first app is deploy to "staging" slot.  
# If all looks good, do a LB switch to "production" slot
- ${{ if in(parameters.blue_green, 'True', 'true') }}:
  - stage: ${{ parameters.stage_name }}_GREEN_LIVE
    condition: ${{ parameters.condition }}
    dependsOn: ${{ parameters.stage_name }}
    jobs:
    - deployment: switch_slots
      environment: "${{ parameters.ado_environment }}"
      strategy:
        runOnce:
          deploy:
            steps:
            - download: none
            
            # Only active slots can be swapped. Hence starting the standyby slot if not started already
            - task: AzureAppServiceManage@0
              displayName: Start the Standby Slot
              inputs:
                azureSubscription:  ${{ parameters.az_subscription_sc }} 
                ResourceGroupName: $(var_az_app_service_rg)
                WebAppName: $(var_az_app_service)
                Action: 'Start Azure App Service' 
                SpecifySlotOrASE: true
                Slot: 'staging'

            - task: AzureAppServiceManage@0
              inputs:
                azureSubscription: ${{ parameters.az_subscription_sc }}
                ResourceGroupName: $(var_az_app_service_rg)
                WebAppName: $(var_az_app_service)
                Action: 'Swap Slots'
                SourceSlot: 'staging'
                PreserveVnet: true
                SwapWithProduction: true

            # Stopping the standby slot for saving resources. 
            - task: AzureAppServiceManage@0
              displayName: Stop the Standby Slot
              inputs:
                azureSubscription:  ${{ parameters.az_subscription_sc }} 
                ResourceGroupName: $(var_az_app_service_rg)
                WebAppName: $(var_az_app_service)
                Action: 'Stop Azure App Service' 
                SpecifySlotOrASE: true
                Slot: 'staging'