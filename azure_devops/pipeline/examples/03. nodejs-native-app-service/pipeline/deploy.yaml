parameters:
- name: ado_environment

- name: deploy_variable_group

- name: stage_name

- name: az_app_service

- name: az_subscription_sc

- name: az_app_service_rg
  default: ''

- name: blue_green
  default: 'False'

- name: depends_on
  type: object
  default: ['ci']

- name: condition
  default: succeeded()

stages:
- stage: ${{ parameters.stage_name }}
  dependsOn: ${{ parameters.depends_on }}
  condition: ${{ parameters.condition }}

  variables:
  - group: "${{ parameters.deploy_variable_group }}"
  
  jobs:
  - deployment: deploy
    environment: "${{ parameters.ado_environment }}"

    variables:
      ${{ if in(parameters.blue_green, 'False', 'false') }}:
        APP_SERVICE_SLOT: 'production'
      ${{ if in(parameters.blue_green, 'True', 'true') }}:
        APP_SERVICE_SLOT: 'staging'

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: ${{ parameters.az_subscription_sc }}
              ResourceGroupName: ${{ parameters.az_app_service_rg }}
              WebAppName: ${{ parameters.az_app_service }}
              appType: 'webAppLinux'
              deployToSlotOrASE: true
              SlotName: '$(APP_SERVICE_SLOT)'
              packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
              StartupCommand: 'pm2 start ./app.js --no-daemon'
              RuntimeStack: 'NODE|18-lts'
              AppSettings: >
                -SPRING_PROFILES_ACTIVE $(var_spring_profiles_active)
                -PORT 8080

          # Only active slots can be swapped. Hence starting the standyby slot if not started already
          - task: AzureAppServiceManage@0
            displayName: Start the App Service if not started properly
            inputs:
              azureSubscription:  ${{ parameters.az_subscription_sc }} 
              ResourceGroupName: ${{ parameters.az_app_service_rg }}
              WebAppName: ${{ parameters.az_app_service }}
              Action: 'Start Azure App Service' 
              SpecifySlotOrASE: true
              Slot: '$(APP_SERVICE_SLOT)'


# in blue green model, first app is deploy to "staging" slot.  
# If all looks good, do a LB switch to "production" slot
- ${{ if in(parameters.blue_green, 'True', 'true') }}:
  - stage: ${{ parameters.stage_name }}_GREEN_LIVE
    condition: ${{ parameters.condition }}
    dependsOn: ${{ parameters.stage_name }}
    jobs:
    - deployment: switch_slots
      environment: "${{ parameters.ado_environment }}"
      strategy:
        runOnce:
          deploy:
            steps:
            - download: none 
            - task: AzureAppServiceManage@0
              displayName: Start the Standby Slot
              inputs:
                azureSubscription:  ${{ parameters.az_subscription_sc }} 
                ResourceGroupName: ${{ parameters.az_app_service_rg }}
                WebAppName: ${{ parameters.az_app_service }}
                Action: 'Start Azure App Service' 
                SpecifySlotOrASE: true
                Slot: 'staging'

            - task: AzureAppServiceManage@0
              inputs:
                azureSubscription: ${{ parameters.az_subscription_sc }}
                ResourceGroupName: ${{ parameters.az_app_service_rg }}
                WebAppName: ${{ parameters.az_app_service }}
                Action: 'Swap Slots'
                SourceSlot: 'staging'
                PreserveVnet: true
                SwapWithProduction: true

            # Stopping the standby slot for saving resources. 
            - task: AzureAppServiceManage@0
              displayName: Stop the Standby Slot
              inputs:
                azureSubscription:  ${{ parameters.az_subscription_sc }} 
                ResourceGroupName: ${{ parameters.az_app_service_rg }}
                WebAppName: ${{ parameters.az_app_service }}
                Action: 'Stop Azure App Service' 
                SpecifySlotOrASE: true
                Slot: 'staging'
              